##################################################### 
单词积累
  emergency 紧急的
  alert   警报
  critical  关键的
  explanatory  解释的
  isolate  隔离的,孤立的
  stripe 条带,条纹 (条带化技术:将一块连续的数据分成很多小部分并把他们存储到不同磁盘上)

##################################################### 
命令补充
  统计命令:wc -l  //work count,统计行

##################################################### 
Split分离解析(视图解析)

分离解析(为客户端提供最近服务器IP地址)
• 当收到客户机的DNS查询请求的时候
– 能够区分客户机的来源地址
– 为不同类别的客户机提供不同的解析结果(IP地址)

实现分离解析:
	view "类别名" {
	  match-clients {  来源地址;   .. ..;  };
	  zone "域名" IN {
	    ......
	  };
  };
	view "类别名" {
	  match-clients {  来源地址;   .. ..;  };
	  zone "域名" IN {
	    ......
	  }; 
  };

来源地址可以填:ip地址,网段,any,定义的acl变量
acl变量定义:acl 变量名 { 来源地址; .. ..; };

注意事项:
1.由上到下进行,匹配及停止
2.分类要合理,每一个客户端都要找到自己的分类
3.所有的zone必须都在view中

例子:
[root@svr7 /]# vim /etc/named.conf 
  options {
      directory       "/var/named";
  };
	view "nsd" {
	  match-clients {  192.168.4.207;   };  #匹配客户端来源地址
	  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.zone";  ---->解析结果为 192.168.4.100
	  }; 
  };
	view "other" {
	  match-clients {  any;  };  #匹配客户端来源地址
	  zone "tedu.cn" IN {
        type master;
        file "tedu.cn.other";  ---->解析结果为 1.2.3.4
	  };
  };

##################################################### 
RAID阵列概述
• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率
– 至少需要两块磁盘组成

• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少需要两块磁盘组成

• RAID5,高性价比模式
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少需要三块磁盘组成(一般用4块,还有一块用作热备)

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少需要四块磁盘组成

• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少需要四块磁盘组成

##################################################### 
进程
systemd:所有进程的父进程,上帝进程

查看进程树:pstree
– 格式:pstree [选项] [PID或用户名]
– -a:显示命令的参数(arguments)
– -p:列出对应PID编号

查看进程快照:ps(Processes Snapshot)
– aux:显示当前终端所有进程(a)、当前用户在所有终端下的进程(x), 以用户格式输出(u)
– -elf:显示系统内所有进程(-e)、以长格式输出(-l)信息、包括最完整的进程信息(-f)

进程动态排名:top 交互式工具
– 格式:top [-d 刷新秒数] [-U uid]
在top界面下
  按键盘  P(大写)  按CPU占用排序
  按键盘  M(大写)  按内存占用排序

检索进程:pgrep 
– -l:输出进程名,list-name
– -U:检索指定用户的进程,uid
– -x:精确匹配完整的进程名,exact

进程的前后台调度
• 将程序放入后台:&
• Ctrl + z 组合键
– 挂起当前进程(暂停并转入后台)
• jobs 命令
– 查看后台任务列表
• fg 命令
– 将后台任务恢复到前台运行
• bg 命令
– 激活后台被挂起的任务

杀死进程(一般不强制杀死,而是让其自行终止)
– kill [-9] PID... 
– killall [-9] 进程名...
– pkill 查找条件  //pgrep+kill

杀死一个用户开启的所有进程（强制踢出一个用户）
  killall -9 -u lisi

##################################################### 
日志管理

服务名:rsyslog

常见的日志文件
　/var/log/messages 	记录内核消息、各种服务的公共消息
　/var/log/dmesg 		记录系统启动过程的各种消息
　/var/log/cron 		记录与cron计划任务相关的消息
　/var/log/maillog 	记录邮件收发相关的消息
　/var/log/secure 	记录与访问限制相关的安全消息
	
日志分析
• 通用分析工具:tail、tailf、less、grep等文本浏览/检索命令 
    //tailf,文件跟踪(follow)

用户登录分析
  查看已登录的用户信息:users、who、w  //w:who and what,信息最全
  查看最近登录成功/失败的用户信息:last、lastb   //b:bad

日志消息的优先级
  0  EMERG（紧急）          会导致主机系统不可用的情况
  1  ALERT（警告）          必须马上采取措施解决的问题
  2  CRIT（严重）	        比较严重的情况
  3  ERR（错误）	       运行出现错误
  4  WARNING（提醒）      可能会影响系统功能的事件
  5  NOTICE（注意）        不会影响系统但值得注意
  6  INFO（信息）	       一般信息
  7  DEBUG（调试）          程序或系统调试信息等

使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志
– journalctl -u 服务名 [-p 优先级]  //u:unit
– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --until="yyyy-mm-dd HH:MM:SS"
– journalctl -xe //x:explanatory,e:error

##################################################### 
systemd介绍(是init程序)

• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合

• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖
– 配置目录:/etc/systemd/system/
– 服务目录:/lib/systemd/system/
– 主要管理工具:systemctl

对于服务的管理
 systemctl restart  服务名    #重起服务
 systemctl start    服务名    #开启服务
 systemctl stop     服务名    #停止服务
 systemctl status   服务名    #查看服务当前的状态
 systemctl enable   服务名      #设置服务开机自启动
 systemctl disable  服务名      #设置服务不开机自启动

RHEL6 运行级别(切换运行级别:init 5 )
   0：关机    
   1：单用户模式（基本功能的实现，破解Linux密码）
	 2：多用户字符界面（不支持网络）    
	 3：多用户字符界面（支持网络）服务器默认的运行级别   
	 4：未定义
	 5：图形界面   
	 6：重起 

RHEL7 运行模式 
   字符模式：multi-user.target
   图形模式：graphical.target
当前直接切换到字符模式:systemctl isolate multi-user.target //单独运行指定target
当前直接切换到图形模式: systemctl isolate graphical.target
查看每次开机默认进入模式:systemctl get-default
设置默认模式:systemctl set-default xx

##################################################### 
