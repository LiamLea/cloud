###############################################################################
命令补充

如果远程连接到某个主机执行任务,则一旦断开连接,与该终端相关的进程都会关闭
所以当执行比较长时间的命令,如备份等,就特别不方便,这就需要用到screen命令

screen 命用于会话保持,该进程不依赖于终端,命令如下:
  screen     //开启一个screen,并在该screen启动一个shell
  ctrl+a+d   //暂时离开该会话
  ctrl+d     //关闭该会话
  screen -ls  //查看启动的screen,可以获得id号
  screen -r id号    //return某个screen,继续上次的操作

捕捉信号:
  trap '命令' 信号   
#常用信号:
#         INT   //中断信号,即按下ctrl+c产生
#         HUP   //一般用来重新载入程序

创建临时文件:mktemp    //用X代表随机字符,如mktemp XXXX.txt
#该命令的返回结果为创建的临时文件的名字,可以结合$()使用

###############################################################################

内核输出的伪文件系统
  /proc :内核状态和统计信息的输出接口
         还提供一个配置接口:/proc/sys
  /sys  :存储设备的信息和相关属性

udev  是用户空间程序,通过读取/sys下的硬件信息创建设备文件
      创建设备文件时,会读取相关的规则:/etc/udev/rules.d/ /usr/lib/udev/rules.d/

###############################################################################
内核编译

1.获取源码
  访问源码网站 -> 系统版本 -> os/ -> Source/ -> SPackages/ -> kernel.xx.src.rpm

2.rpm -ivh kernel.xx.src.rpm   //生成一个rpmbuild

3.rpmbuild -bp rpmbuild/SPEC/kernel.spec  

4.cd rpmbuild/BUILD/...    //生成的源码就在此目录下
  make menuconfig
  make -j 2  //启动两个线程同时编译
  make modules_install   //在 /usr/lib/modules/ 下生成一个目录
  make install      //安装内核,会在/boot目录下生成新的vmlinuz,initramfs,grub.cfg等文件

###############################################################################
systemd

systemd新特性:
  系统引导时,服务并行启动
  按需激活    //即,服务并没有真正启动,当第一次访问时,才会真正启动服务
  系统状态快照
  基于依赖关系定义服务逻辑控制

核心概念:unit

unit常见类型:
  service     //定义系统服务
  target      //一系列服务的集合,用于模拟实现"运行级别"
  device      //定义内核识别的设备
  mount       //定义文件系统挂载点
  socket      //标识进程间通信用到的socket文件
  snapshot    //管理系统快照
  swap        //识别swap设备
  automount   //文件系统自动挂载设置
  path        //定义文件系统中的文件和目录


service unit文件的常见选项:

  [Unit]
  Description=xxx   //描述信息
# After=xx          //在什么之后运行
# Requires=xx       //强依赖,如果所依赖unit没有启动,这个unit也无法启动
# Wants=xx          //弱依赖,如果所依赖的unit没启动,这个unit还是可以启动

  [Service]
  Type=xx           //simple,表明启动的进程是该服务的主进程
                    //notify,与simple类似,只不过启动后会发送通知消息
                    //forking,会fork新的进程作为主进程,然后父进程退出，用于守护进程的程序
										//nginx是守护进程，所以Type=forking,httpd不是，所以Type可以设为notify
# Environment=xx    //提供变量的文件
  ExecStart=xx      //启动服务的命令或脚本
  ExecStop=xx       //关闭服务的命令或脚本

  [Install]
# RequiredBy=xx     //被其他unit所强依赖
  WantedBy=xx       //被其他unit所弱依赖,比如填:multi-user.target

#创建或修改unit后需要重新载入systemd:systemctl daemon-reload

###############################################################################
