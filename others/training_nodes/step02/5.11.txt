###############################################################################
正则表达式(空格很重要,也会参与匹配)

注意空行:包括只含有空格的行("^\s+\s$"),和什么都没的行("^$")

基本正则:    //命令:grep,当需要用扩展正则时,有些地方需要转义
  ^         
  $  
  *  
  []

扩展正则:    //命令:egrep  
  +  
  ?  
  {}  
  ()     //分组(会复制匹配到的部分,\1代表第1个括号匹配的内容,\2代表第2个括号匹配到的内容),可以利用这个特性对内容进行重组
        //如:sed -r 's/([A-Z])/{\1}/g'   ,给每个大写字母加上括号
  |
  \<
  \>
  \b
  \w      //字母,数字,下划线
  \s      //空格,tab
  \d      //数字,egrep -P,否则用不了

###############################################################################
sed 逐行处理(不能用双引号,因为$在双引号中表示变量,在单引号中没有特殊含义)

sed [选项] '表达式' 文件    //表达式由 行控制 和 命令 组成
                            //表达式可以用 ;号 隔开,输入多条,后面的命令是以前一条命令的结果作为输入
                            //表达式可以用\n进行换行,实现多行的插入或替换

选项:
  -n  //slient,开启安静模式后就关闭默认输出,默认输出处理后文件的每一行(而不是原始文件)
  -e  //expression(-e '命令1',-e '命令2').可以直接使用;号执行多条指令
  -r  //regexp-extend,支持扩展正则
  -i  //in-place,就地,直接修改原文件

行控制:
  1,7           //1到7行
  2,+3          //第2行,即后面的3行
  1~3           //第1行并且步长为3
/正则表达式/    //替代行号,所以可以写成 
/正则表示式/,7  //表示从匹配的行到第7行

命令:         //可以利用{}大括号对同一行控制执行多条命令,如sed -n '5{p;d}' 1.txt
  p            //print
  d            //delete
  a,i          //add,在后面插入,insert在前面插入
  c            //replace,对行替换
s/old/new/     //subtitude,替换所有行第1个old
s/old/new/数字    //替换所有行第几个old,如:sed 's/aa/bb/2' 1.txt
s/old/new/g    //global,全部替换
r 文件名        //读入某个文件,然后根据前面的行控制看插入到哪
w 文件名        //根据前面的行控制将特定的内容写入到该文件

特殊字符:
  =      //表示行号,sed -n '=' 1.txt ,显示每行的行号
  $     //用于行控制表示最后一行,^不能用于行控制,只能用于表示行首


注意:当替换字符串,符号有冲突时,可以加转义字符.或者可以将///换成!!!或者其他的形式

例子:
  sed -n 'p' 1.txt     //打印所有行
  sed -n '1,3p' 1.txt  //打印1-3行
  sed -n '1,3!p' 1.txt //打印除了1-3行的所有行
  sed -n '1p;3p' 1.txt //打印第1行和第3行
  sed -n '1,+3p' 1.txt //打印第1行以及后3行
  sed -n '1~3p' 1.txt  //打印第1并且步长设为3(即每跳过3行打印一次)
  sed -n '$=' 1.txt    //显示最后一行行号,即有多少行
  1,7s/old/new/n  //替换第1-7行的第n个old,如:sed '3s/aa/bb/2' 1.txt
  s/^/#/        //给每行加上注释

###############################################################################
