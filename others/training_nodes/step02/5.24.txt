###############################################################################
单词积累
  GPL协议:copy,modify,release,inherit    //任何人可以复制,修改,发布,但必须继承GPL协议
  post 在...之后,一般指安装后脚本
  spec(specification)  说明书

###############################################################################
命令补充
  生成ssh秘钥(非交互式):ssh-keygen -f /root/.ssh/id_rsa -N ''
  //可以无密码访问拥有其公钥的主机,f:output_file,N:new_password

  vim +数字 文件名    //打开该文件,指定光标的初始位置

  ab   //apache bench,-n一次发送出去的请求数
                      -c发送的请求数

###############################################################################
版本控制

  版本库  是版本控制的核心
          是一个仓库,每变动一次就产生一个新的版本,可以还原到之前的各个版本

  集中式版本控制系统:客户端共用一个仓库
  分布式版本控制系统:每个客户端都是一个仓库的完整克隆,每个人都是服务器

  版本控制软件:git   

###############################################################################
Git基础

Git基本概念:
  Git仓库:保存所有数据的地方
  工作区:从仓库中取出来的文件,放在磁盘上供你使用或修改
  暂存区:是一个索引文件,保存在了将要提交的文件列表信息

工作流程:
  git clone     //克隆远程服务器的Git仓库
  在工作区对数据进行操作 
  git add       //将需要提交的数据放入暂存区域
  git commit    //将数据提交给Git仓库
  git push      //将Git仓库数据提交到远程服务器

服务器端
  1.安装git
  2.初始化一个空仓库(即创建一个新的仓库,可以创建多个)
    mkdir /var/git
    git init /var/git/project --bare     
#仓库名为project,--bare表示是空仓库

客户端
  1.安装git

  2.克隆Git仓库
    git clone root@192.168.2.200:/var/git/project    
#克隆到当前目录下 
#这里的project是工作区,project/.git是本地仓库
#下次就不需要克隆了,直接git pull,本地仓库就会和远程服务器的一致

  3.在工作区进行操作

  4.将工作区修改提交到暂存区
    git add .    //添加数据
    git rm xx    //删除数据,在本地删除了,等提交后,在仓库中删除

  5.将暂存区的修改提交到本地仓库
    git commit -m "说明"

  6.将本地仓库的数据提交到远程服务器
    git push

git其他操作:
  1.查看工作区和暂存区的状态
    git status

  2.查看日志
    git log     //--pretty=oneline,每条记录用一行显示
                //一长串的编码就是该文件的版本号
    git reflog  //(record info log)记录了HEAD指针和每一个版本,HEAD@{0}表示最新版

  3.还原到某个版本
    git reset --hard 版本号 //通过查看git reflog

###############################################################################
Git分支

常见分支命名规范:
  MASTER       //主分支,代码的核心
  DEVELOP     //最新开发成果的分支
  RELEASE     //为发布新产品设置的分支
  HOTFIX      //为了修复软件BUG缺陷的分支
  FEATURE     //位开发新功能设置的分支

1.查看存在哪些分支和处在哪个分支中
  git branch -v     //*表示所在此分区

2.创建分支
  git branch 分支名

3.切换到某个分支
  git checkout 分支名  //切换到不同的分支中,内容都不一样

4.合并分支(先切到要合并的那个分支中)
  git merge 分支名    
#只会改变当前分支的内容

5.解决冲突
  直接打开文件,文件内会列出冲突的内容,删除不需要的内容即是最终的内容

###############################################################################
Git服务器(使用协议:SSH  //或Git或HTTP)

用SSH协议搭建:
  //客户端使用git clone
  //设置ssh秘钥,就不需要输入密码

用Git协议搭建(只读)
  装包:git-daemon
  修改配置文件/usr/lib/systemd/system/git@.service 中的--base-path选项
  启动服务:git.socket
  //客户端使用:git clone git://192.168.2.100/project

用HTTP协议搭建(只读)
  装包:gitweb,httpd
  修改配置文件/etc/gitweb.conf修改$projectroot选项
  启动服务:httpd
  //客户端:firefox http://192.168.2.100/git   //必须填git

###############################################################################
制作nginx的RPM包

RPM就是一个安装好的软件的压缩包

1.安装rpm-build软件

2.生成rpmbuild目录结构
  rpmbuild -ba xx.spec 
#执行该运行报错,会在当前目录下创建rpmbuild目录
#rpmbuild目录:
#        SOURCES  //存放源码包的目录,即需要制作成rpm包的源码包
#        SPECS    //制作rpm包的配置文件
#        RPMS     //存放制作好的rpm包

3.将源码包放入rpmbuild/SOURCES/ 目录下
  cp nginx-1.10.3.tar.gz rpmbuild/SOURCES

4.创建并修改配置文件
#vim rpmbuild/SPECS/xx.spec
  Name:nginx
  Version:1.10.3
  ...
  Source0:nginx-1.10.3.tar.gz

  %post         //在下面写安装后脚本,非必需
  ...

  %build        //安装,configue需要自己写
  ./configure
  ...

  %doc        //对哪些文件和目录打包,很重要
  /usr/local/nginx/*

5.制作rpm包
  rpm -ba rpmbuild/SPECS/xx.spec
#制作好的rpm包在RPMS目录下

###############################################################################
