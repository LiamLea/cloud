###############################################################################
补充

1.if '' in '123':   	      //这个判断为真,空字符属于字符串

  if '' in  ['1','2','3']     //这个判断就为假了

2.利用字典,根据条件执行相应的函数  //相当于case
  cmds={'key1':func1,'key2':func2}  //func后面不能加(),否则储的是函数的返回结果
  cmds[xx]()   //根据xx的值,执行相应的函数

3.文件对象也是可迭代对象
  with open('/etc/passwd') as f1:   //这里的f1就是可迭代对象
      ... 

4.ftp的主动模式和被动模式
  默认为被动模式,即命令连接和数据连接都由客户端建立
  
ftp关闭被动模式:
  ftp xxx
  > passive

wget下载ftp内容:
  wget --no-passive-ftp ftp://xx

###############################################################################
列表

  append(xx)
  extend(XX)  //将另一个列表接上去
  remove(xx)  //删除第一个xx元素
  index(xx)   //获得第一个xx元素的下标
  insert(index,xx)
  reverse()
  sort()      //升序排序
  sort(reverse=True)
  count(xx)   //统计元素为xx的个数
  pop()
  pop(xx)
  copy()
#blist=alist.copy() 和 clist=alist 区别:
#blist和alist指向不同的存储空间
#clist和alist指向相同的存储空间

###############################################################################
元组(相当于静态的列表)

查询函数与列表一致

###############################################################################
字典

#不可变的对象才可以作为key,如:字符串,数字,元组等

1.生成字典的函数:dict

  dict('ab',['c','d'],('e','f'))
#返回的字典:{'a':'b','c':'d','e':'f'} 

2.生成值相同的字典的函数:{}.fromkeys

  {}.fromkeys(['a','b','c'],20)
#返回的字典:{'a':20,'b':20,'c':20}

3.遍历字典(只能遍历key)
  for key in adict:
    print(key,adict[key])

4.打印字典某些key的value
  adict={'key1':'a','key2':'b','key3':'c'}
  print('%(key1)s,%(key3)s' %adict)

5.相关函数
  keys()
  values()
  items()       //返回一个可迭代对象,每一个元素都是键值对,否则只能迭代key
  pop(key)
  update(dict)   //将另一个字典加上去
  get(key)        //若key不存在返回none(当需要判断key是否存在,用in即可)
  get(key,xx)   //若key不存在返回xx(可以是字符串,也可以是数字)

###############################################################################
集合(就像是一个无值的字典,用{}表示)

集合元素必须是不可变对象,且不能重复
集合是无序的(跟字典一样)

经常使用集合实现 去重操作

1.生成不可变集合的函数:frozenset(iter)
  如:frozenset('abc')   //{'a','b','c'}

2.生成可变集合的函数:set(iter)
  如:set(['a','b','c'])  //{'a','b','c'}

3.求交集:aset&bset

4.求并集:aset|bset

5.求差补:aset-bset   //aset中有的,bset中没有的

6.相关函数
  remove(xx)
  update(set)

###############################################################################
