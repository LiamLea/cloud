###############################################################################
OOP:object oriented program

在python中一切皆对象

定义一个类的基本格式:

class 类名:
  def __init__(self,参数): 
    self.属性1=xx
  
  def func1(self):    
    print('%s' %self.属性1)

类名采用驼峰命名,第一个字母大写
__init__是构造函数,在创建实例的时候自动调用
所有方法的第一个参数必须是self,表示实例(可以用别的名字,java中是this)
创建实例时,实例会自动作为第一个参数传入


一.组合   //即将一个对象传入另一个对象中,就有了多级的对象
  class Weapon:
    def __init__(self,name,strength):
      self.name=name
      self.strength=100
  
  class GameRole:
    def __init__(self,name,weapon):
      self.name=name
      self.weapon=weapon
  
  ji=Weapon('方天画戟',100)
  lb=GameRole('吕布',ji)
  print(lb.weapon.name)   //这里就有两级,输出的内容为"方天画戟"

二.继承     //可以对;父类的属性和方法进行重写

  class 类名(父类):
    ...            //可以填pass表示什么都不做

1.重写构造函数:
  def __init__(self,参数):
    super(类名,self).__init__(部分参数)   //等价于:父类.__init__(self,部分参数)
    ...

2.多重继承:   
  class 类名(父类1,父类2):   //有相同的属性或方法时,优先继承左边父类的
    ...

三.类的magic方法(以双下划线开始的)

class A:
  def __init__(self,参数):  //构造函数
    ...

  def __str__(self):    //当对象需要转换成字符串时,自动执行这个函数
    return  'xx'        //如: a=A()
                        //    print(a)   ,此时会返回xx

  def __call_(self):    //当对象执行调用时,自动执行这个函数
    ...                 //如: a=A()
                        //    a()     ,此时会执行...处的代码

###############################################################################
re模块

一.正则补充

1.匹配特殊字符串: 

  [^0-9]        //匹配非数字的单个字符
  [0-9^]        //匹配数字或^

  [a-9]         //出错
  [a9-]         //匹配a或9或-

2.非贪婪匹配:
字符串:tsdsdtdsmsdsdsdm
  t.*?m   //匹配到:tsdsdtdsm
  t.*m    //匹配到:tsdsdtdsmsdsdsdm
          //用grep达不到预期效果的原因:
          //grep是以行为处理单位的

二.函数

#匹配对象,需要用其group()方法才能获取匹配内容

1.search('regexp','string')             //返回第一个匹配的对象

  m=search('f..','seafood is faad')     //m.group()为foo 

2.findall('regexp','string')            //匹配所以的内容,返回一个列表

  findall('f..','seafood is faad')      //结果为['foo','faa']

3.finditer('regexp','string')           //返回匹配对象的迭代器

  for m in finditer('f..','seafood is faad')
    print(m.group())                    //输出'foo' \n 'faa'

4.split('regexp','string')   //用于分割

  split('f..','seafood is faad')        //结果为['sea','d is ','d']
  split('\.|-','how-are-you.tar')       //以.或-作为分割符号,输出一个列表

5.sub('regexp','replace','string')      //用于替换

  sub('f..','0','seafood is faad')      //结果为'sea0d is 0d'

6.常常先将模式进行编译,可以得到更好的效率
  pattern=re.compile('regexp')
  m=pattern.search('string')
  pattern.split('string')

###############################################################################
