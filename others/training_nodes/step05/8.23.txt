###############################################################################
制作后端盘

1.创建一个虚拟机，并在其中操作，然后把这个盘作为后端盘

2.对虚拟机剩余空间进行写零操作
#基本原理是向磁盘中写入一个全0的文本文件，直到磁盘被填充满，然后将文件删除
  dd if=/dev/zero of=/zero.dat

3.对qcow2镜像进行压缩，生成新的镜像
  qemu-img convert -c -O qcow2 xx yy       //c:compress,压缩
                                          //O:out_format

###############################################################################
批量安装定制的系统（PXE）

1.搭建PXE环境

2.编写安装后脚本,配置yum源

3.在脚本中写上要安装的软件
  如果有些外部软件，可以制作成rpm包放入yum源中

###############################################################################
架构思路(从上到下)

1.高可用层

2.缓存层
  redis等，用于缓存经常访问的数据

3.调度层

4.应用层
  nginx等网站服务器
  mysql等数据库服务器

5.存储层
  ceph，nfs等，用于存储图片，视频等
  不会把这些存储到数据库，否则读取效率会很慢，数据库一般只会存储他们的地址

###############################################################################
补充

1.数据备份的4种方式：
  mysqldump
  innobackupex
  binlog
  主从同步

2.数据库中，数值类型的宽度的作用：
  为了节省存储空间

3.新增从数据库
  利用innobackupex进行全备
  每个备份目录都有一个xtrabackup_binlog_info，记录备份binlog时数据库当前位置

4.当数据库服务处理速度慢时，怎么查找原因：   //其他服务类似
(1)查看网络：
  带宽太小

(2)系统硬件使用率：
  当硬件使用率特别高时，说明硬件可能达到瓶颈

(3)查看服务的状态信息：
  并发量等

(4)程序员编写的代码问题：
  比如有大量的多表查询，嵌套查询
  获取有问题的查询命令：开启慢查询日志(记录查询慢的指令)
#查询日志：可以查看所以的sql语句，能够获取对哪些数据的访问比较多

(5)网络架构

5.如何优化公司网络架构
(1)加大网络带宽
(2)升级硬件
(3)升级软件版本
(4)数据库加索引,做读写分离
(5)加缓存服务器
(6)优化服务的运行参数

6.应该监控服务器的哪些资源
(1)公有数据:
  TCP或UDP端口，web服务等
(2)私有数据:
  登录用户数，进程数，网络流量，硬件使用率等

7.什么情况下需要让普通用户拥有root权限：
  进行权限细分，让不同用户有不同的权限

###############################################################################
ansible动态主机清单

1.创建ansible.cfg文件
  [defaults]
  inventory = xx.py
  remote_user=root
  host_key_checking=False

2.创建动态主机脚本:xx.py
#输出的数据类型必须是json,格式如下：
#{
#    "组1": {"hosts": ['主机1', '主机2']},
#    "组2": {"hosts": ['主机3', '主机4']},
#}
#
  #!指定python解释器
  ... ...
  if __name__ == '__main__':
      ... ...
      result = {}
      for group, ip in qset:
          if group not in result:
              result[group] = {}  # {'dbservers': {}}
              result[group]['hosts'] = []  # {'dbservers': {'hosts': []}}
          result[group]['hosts'].append(ip)
      print(json.dumps(result))

3.赋予动态主机清单执行权限
  chmod +x xx.py

4.测试
  ansible all -m ping 

###############################################################################
