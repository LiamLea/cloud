###############################################################################
keytone基础概念

1.访问某个服务的流程
  user请求访问某个服务 -> 输入用户名和密码 -> keystone检查crendentials确认用户的身份 -> 
  认证成功后，返回一个Endpoint和Token(包含一个role列表)给user -> 
  user拿到token后根据里面的role列表的权限对系统资源进行调用 ->
  该服务会拿着这个token去keystone验证

2.两个功能：
  用户管理
  服务目录管理：提供服务列表（包括service和endpoint，即服务列表和每个服务的url）

3.user
  指的是使用openstack service的用户
  可以是人，服务，系统
  就是说只要是访问openstack service 的对象都可以称为User

4.credentials
  用于确认用户身份的凭证
  可以是 用户名和密码，用于名和API key(密钥）,token

5.authentication
  用户身份验证的过程
  第一次验证身份是使用用户名与密码或者用户名与API Key的形式
  当用户的Credentials被验证后，keystone会给用户分配一个token（包含该用户的role列表） 供该用户的后续请求操作

6.token
  是一串数字字符串，当用户访问资源时需要使用的东西，有时效性

7.role
  本身是一堆ACL集合，主要用于权限的划分
  可以给User指定Role，user会获得role对应的操作权限
  系统默认使用管理Role的角色，管理员用户：admin ，普通用户：member（老版本） user（新版本）
  user验证的时候必须带有Project

8.policy
  用来控制User对Project中资源的操作权限
  通过配置/etc/keyston/policy.json，keystone实现了对User基于Role的权限管理（user <- role <- policy)

9.project（tenant)
  Project是一个人或服务所拥有的资源集合，不同的Project之间资源是隔离的，资源可以设置配额
  Project中可以有多个User，每一个User会根据权限的划分来使用Project中的资源
  User在使用Project的资源前，必须要与这个Project关联，并且制定User在Project下的Role（project-user-role）

10.service
  即服务，如Nova，Glace，等各个组件

11.Endpoint
  用来定位和访问某个service的地址，通常是一个URL
  不同的region有不同的Endpoint（更像是一个地理上的概念，比如像阿里云有华北，华东等等）
  Endpoint分为三类：
    admin url         //管理员用户使用，Port：35357，通常只能对内网开放
    internal url       //openstack内部组件间互相通信，Port：5000，通常可以对外网开放
    public url         //其他用户访问地址，Port：5000，只能对有安装openstack服务的机器开放

12.Domain
  Keystone提供一个名为‘Default’的默认域
  可以认为是 project，user，group 的 namespace
   一个 domain 内，这些元素的名称不可以重复，但是在两个不同的domain内，它们的名称可以重复
  Keystone提供一个名为‘Default’的默认域

###############################################################################
keystone（安装在controller-node上，服务类型：identity）

1.对数据库操作
  创建名为keystone的数据库和用户，keystone用户有keystone数据库的权限

2.安装keystone需要的组件：
  httpd，memcached

3.生成一个token
  openssl rand -hex 10

4.修改配置文件keystone.conf
  [DEFAULT]
  admin_token=xx        //使用token的方式使用keystone时设置
  version=True            //打印日志

  [database]
  connection=mysql://用户名:密码@ip地址/数据库名       //xx为ip地址

  [memcache]
  servers=xx:11211

  [revoke]
  driver=xx      //用默认的驱动

  [token]
  provider=xx
  driver=xx

5.初始化keystone数据库
  su -c 'keystone-manage db_sync' keystone

6.配置httpd服务
  创建两个虚拟站点（端口号分别为5000和35357，功能是一样的，只是为了分流)
  下载python网页
   启动httpd服务

7.利用token使用keystone
  export OS_TOKEN=xx
  export OS_URL=xx:35357/v3

8.创建keystone服务
  openstack service create --name keystone --description 'xx' identity       //identity表示创建的是认证服务

9.创建keystone的endpoint
  openstack endpoint create \
  --publicurl http://xx:5000/v3 \
  --internalurl http://xx:5000/v3 \
  --adminurl  http://xx:35357/v3  \
  --region RegionOne \
  identity

10.创建project,user,role等      //创建一个项目用
  openstack project create --description 'xx'  项目名
  openstack user create --password-prompt 用户名
  openstack role create 角色名
  openstack role add --project 项目名 --user 用户名 角色名       //表明该用户对该项目具有该角色的权限
#创建admin项目，admin用户，admin角色
#创建demo项目，user用户，user角色
#创建service项目，后续的组件都会放在该项目中

11.不需要使用token的方式认证了 
  unset OS_TOKEN
  unset OS_URL
#vim /usr/share/keystone/keystone-dist-paste.ini
#删除admin_token_auth配置

12.创建admin-openrc.sh
  export OS_PROJECT_DOMAIN_NAME=Default
  export OS_USER_DOMAIN_NAME=Default
  export OS_PROJECT_NAME=admin
  export OS_TENANT_NAME=admin
  export OS_USERNAME=admin
  export OS_PASSWORD=xx
  export OS_AUTH_URL=http://xx:35357/v3
  export OS_INTERFACE=internal
  export OS_IDENTITY_API_VERSION=3
  export OS_REGION_NAME=RegionOne
  export OS_AUTH_PLUGIN=password

13.访问keystone服务
  source admin-openrc.sh

###############################################################################