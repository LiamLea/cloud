###############################################################################
命令补充

1.主机路由:目标地址为单个IP
  网路路由:目标地址为某个网段

2.ip link       //用于管理网络设备,设置各种属性(工作在二层)
3.ip addr
  ip addr add IP地址 dev eth0 label eth0:0   //默认添加ip地址都是叠加,即一个网卡多个ip  
                                             //不加标签ifconfig无法识别
4.ip route
5.ip netns     //ns:namsspace,用于隔离内部网络,进行虚拟化
  ip netns add xx  //xx为新的网络空间
  ip link set 设备名称 netns xx  //此时在当前环境下就看不到该网络设备
  ip netns exec xx 命令   //在指定网络空间执行命令


###############################################################################
/etc/libvirt/qemu/networks/

1.private1.xml:
  <network>
    <name>private1</name>
    <uuid>559de4a7-724c-4eec-ba19-3c7c2e69b4ad</uuid>
    <bridge name='private1' stp='on' delay='0'/>
    <mac address='52:54:00:37:78:11'/>
    <domain name='private1'/>
    <ip address='192.168.4.254' netmask='255.255.255.0'>
    </ip>
  </network>

2.vbr.xml:
  <network>
    <name>vbr</name>
    <uuid>bc8c51cf-34d7-4fa4-bde9-f55b7c025421</uuid>    //自定义的时候删除
    <forward mode='nat'/>                               //设置了nat
    <bridge name='vbr' stp='on' delay='0'/>
    <mac address='52:54:00:35:6e:56'/>                   //自定义的适合删除
    <domain name='localhost' localOnly='no'/>
    <ip address='192.168.1.254' netmask='255.255.255.0'>
      <dhcp>                                             //给加入到该网段的主机分配ip,可以不需要
        <range start='192.168.1.100' end='192.168.1.200'/>   
      </dhcp>
    </ip>
  </network>

###############################################################################
kibana

1.装包
2.配置:/opt/kibana/config/kibana.yml
  server.port: 5601
  server.host: "0.0.0.0"
  elasticsearch.url: "http://es集群:9200"
  kibana.index: ".kibana"
  kibana.defaultAppId: "discover"    //默认展现的页面
  elasticsearch.pingTimeout: 1500    //ping检测超时时间
  elasticsearch.requestTimeout: 30000
  elasticsearch.startupTimeout: 5000
3.启动服务
4.导入数据:
  Settings -> Indics
5.查看Fields(字段)
  Discovery
6.制作图表:
  Visualize
7.展示图像
  Dashboard

###############################################################################
Logstash

工作流程:input -> filter -> output

需要查看logstash的官方文档,学会使用各种插件,然后进行配置文件编写:
  先找例子
  然后查看配置项及其数据类型,看哪些是必须要写的
格式:
  插件名{
    配置项 => 值
    ...
  }

1.logstash-input-file 插件的使用:
input{
  file{
    path => ["/tmp/a.log","/tmp/b.log"]
    type => "xx"                      //打上标签
    sincedb_path => "/var/lib/logstash/since.db"    //存放指针的,该指针能够指明已经读到哪里了,即下次启动的时候,从指针处开始读
    start_position => "beginning"     //默认是从启动软件后,读取新增的数据(有存放指针的文件就不要考虑这项)
  }
}

2.logstash-codec-rubydebug 插件的使用:  //用于调试
output{
  stdout{ codec => "rubydebug" }
}

3.logstash-input-beats 插件的使用:
input{
  beats{
    port => 5044    //以前的日志就不能获取了,可以把以前日志复制过来,然后利用file插件
  }
}

4.logstash-filter-grok 插件的使用:
filter{
  grok{
    match => { "message" => "正则" }     //通过 (?<组名>正则) 来匹配字段  
  }
}
#如http日志正则:{ "message" => "(?<ip>^[0-9.]+).*\[(?<time>.+)\] \"(?<method>[A-Z]+) (?<url>\S+) (?<proto>[A-Z]+)\/(?<ver>[0-9.]+)\" (?<rc>\d+) (?<size>\d+) \"(?<ref>\S+)\" \"(?<agent>\S+)\"" }

5.logstash-output-elasticsearch 插件的使用:
output{
  elasticsearch{                    
    hosts => ["host1","host2",...]  //多写几个,只要是elasticsearch集群中的即可
    index => "索引的名称"
    flush_size => 2000    //等缓存有2000字节才发给elasticsearch集群
    idle_flush_time => 10  //空间的时候,每10s发送一次
  }
}
#当有多种日志时,这时就可以利用标签进行分类处理,如:
output{
  if [type] == "标签名"{
    插件处理
  }
}

1.装包
2.创建配置文件:/etc/logstash/logstash.conf
3.获取远程主机的日志文件:
  远程主机:安装filebeat,修改配置文件     //注意配置document_type,则发送过来的日志就会加上标签
  logstash:使用logstash-input-beats插件

###############################################################################
