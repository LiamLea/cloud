###############################################################################
命令补充

写脚本的思路:
  首先将完整步骤执行一遍
  成功后查看历史命令
  根据历史命令进行编写

用容器实现守护进程服务时,需要关闭守护进程的特性,不然无法运行,如nginx
  CMD ["nginx","-g","daemon off;"]     //g:global,全局变量

###############################################################################
自定义docker镜像(即在镜像的基础上再添加一层)

一.手工制作
1.启动容器
  docker run -it xx

2.在容器内进行操作并退出

3.制作镜像
  docker commit 容器id 名字:标签

二.利用Dockerfile制作
  vim Dockerfile
  docker build -t 新镜像 .   //t:tag

###############################################################################

Dockerfile语法:
  FROM 镜像                //指明基础镜像
  RUN 命令                 //表示命令在容器内运行
  ADD 本地文件 容器内路径  //本地文件只能在当前目录
  WORKDIR 路径              //工作目录,即每次RUN所在的目录
  ENV xx=xx                 //设置变量
  EXPOSE 端口号             //开放的端口
  MAINTAINER xx             //镜像创建者信息
  CMD ["启动命令","参数1","参数2" ...]     
#启动容器时的默认命令,如果没有就默认用基础镜像的启动命令,如果参数有"-"要加上
#启动命令的进程为上帝进程
#如果要启动多个命令,则启动命令为自己编写的脚本(通过ADD上传)

###############################################################################
自定义镜像仓库

一.服务器端
  软件:docker-distribution
  服务:docker-distribution
  数据存储目录:/var/lib/registry

二.客户端
1.指定仓库地址:/etc/sysconfig/docker
  INSECURE_REGISTRY='--insecure-registry IP地址:5000'  //允许非加密方式访问
  ADD_REGISTRY='--add-registry IP地址:端口号'

2.重启服务

3.给要上传的镜像打上tag
  docker tag 名字:标签 IP:端口/名字:标签 

4.上传镜像
  docker push xx

5.查看远程仓库中的镜像名称
  curl http://ip:port/v2/_catalog
6.查看远程仓库中的标签
  curl http://ip:port/v2/名称/tags/list
7.启动远程仓库中的镜像
  docker run -it xx     //会自动加载镜像到本地

###############################################################################
持久化存储(实现数据和镜像的分离)

一.存储卷(volume)
1.启动镜像时指定一个本机的目录(共享的同一个文件夹)
  docker run -it -v 本地目录:容器内的目录 xx

二.共享存储
1.利用nfs和存储卷,使得局域网内的容器都可以共享一个目录

###############################################################################
Docker网络架构
#有一个虚拟交换机:docker0,用于连接各个容器和主机
#一个子网就代表一个VLAN
#具有VLAN功能的交换机才能划分子网(即三层交换机)

1.查看虚拟交换机
  docker network ls
  docker network insepct 交换机的名称
2.创建一个交换机
  docker network create --subnet=网段 交换机的名字
3.使用自定义网桥启动镜像
  docker run --network=xx -it 名称:标签

###############################################################################
客户端访问容器内的资源(最核心的应用)
#将容器内的服务绑定到宿主机上,并且能够实现数据和镜像的分离
#具有很大的灵活性和简便性,是虚拟机不具有的

  docker run -itd -p 宿主机端口:容器端口  -v 宿主机目录:容器目录 xx

###############################################################################
