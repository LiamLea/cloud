###############################################################################
# 什么是k8s

- **Kubernetes**的名字来自希腊语，意思是“舵手” 或 “领航员”。K8s是将8个字母“ubernete”替换为“8”的缩写。
- K8S的创造者，是众人皆知的行业巨头——**Google**。
- 然而K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的**Borg系统**。
- K8S是2014年6月由Google公司正式公布出来并宣布开源的。

# 为什么要使用k8s

- 就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理，就在这个时候，K8S出现了
- Kubernetes是Google 2014年创建管理的，是Google 10多年大规模容器管理技术Borg的开源版本。
- K8s 是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能

# 什么时候用

- 快速部署应用
- 快速扩展应用
- 无缝对接新的应用功能
- 节省资源，优化硬件资源的使用

# 在那用

- **可移植**: 支持公有云，私有云，混合云，多重云（multi-cloud）
- **可扩展**: 模块化, 插件化, 可挂载, 可组合
- **自动化**: 自动部署，自动重启，自动复制，自动伸缩/扩展

# 怎么用

- **Build, Ship and Run （创建，发送和运行）**
- **Build once，Run anywhere（搭建一次，到处能用）**
- Docker技术的三大核心概念，分别是：

1. 镜像（Image）
2. 容器（Container）
3. 仓库（Repository）

###############################################################################
k8s 架构

1.一个Master节点(主节点)

相关服务:
  kube-apiserver              //是整个集群对外的接口
  kube-scheduler 	      //负责调度资源
  kube-controller-manager     //负责容器编排
  etcd			      //负责数据的持久化存储

2.一群Node节点

相关组件:
  pod                        //是kubernetes最基本的操作单元,一个pod是一个进程,内部封装了多个紧密相关的容器
  Docker		     //用于创建容器
  kubelet    		     //负责监视pod
  kube-proxy                 //负责为pod对象提供代理
  fluentd		     //负责日志收集,存储和查询

###############################################################################
部署k8s

一.环境准备:
  设置ip和主机名
  开启路由转发
  配置 yum 源
    因为自带的kubernets版本过低,所以要添加一个yum源(可以去华为找)
  配置私有docker仓库
    需要上传相应的镜像,用于配置k8s:
	kubernetes-dashboard.tar     //用于配置图像界面
        pod-infrastructure.tar       //用于配置kubelet

二.部署master
1.装包:
  etcd
  kubernetes-master
  kubernetes-client

2.修改配置文件
  /etc/etcd/etcd.conf
     ETCD_LISTEN_CLIENT_URLS="http://主ip:2379"

  /etc/kubernetes/config
     KUBE_MASTER="--master=http://主ip:8080"

  /etc/kubernetes/apiserver
     KUBE_API_ADDRESS="--insecure-bind-address=0.0.0.0"
     KUBE_ETCD_SERVERS="--etcd-servers=http://主ip:2379"
#注意KUBE_SERVICE_ADDRESSES 设置的地址范围
     删除 ServiceAccount 参数   //这个参数会开启证书认证机制

  /etc/kubernetes/controller-manager    //查看即可
  /etc/kubernetes/scheduler

3.启动服务(一起启动)
  etcd kube-apiserver kube-controller-manager kube-scheduler

4.验证:
  kube-ctl get cs    //cs:cluster,查看集群状态
  kube-ctl get csr   //csr:cluster resource,查看集群资源,此时没有
  kube-ctl get node  //查看node状态,此时也没有

二.部署node

1.装包
  kubernetes-node 
  docker 

2.修改配置文件
  /etc/sysconfig/docker   
     #设置私有仓库的地址

  /etc/kubernetes/config
     KUBE_MASTER="--master=http://主ip:8080"

  /etc/kubernetes/kubelet
     KUBELET_ADDRESS="--address=0.0.0.0"        //设置kubelet监听地址
     KUBELET_HOSTNAME="--hostname-override=本机名称"
    添加 --kubeconfig=/etc/kubernetes/kubelet.kubeconfig 
         --pod-infra-container-image=pod-infrastructure:latest

  /etc/kubernetes/kubelet.kubeconfig
	apiVersion: v1
	kind: Config
	clusters:
	  - cluster:
	      server: http://主ip:8080
	    name: local
	contexts:
	  - context:
	      cluster: local
	    name: local
	current-context: local

三.设置网络    //不需要搭建k8s就可以设置了
1.master:
  /etc/etcd/etcd.conf
     ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"

  systemctl restart etcd

  etcdctl mk /atomic.io/network/config '{"Network": "10.254.0.0/16", "Backend": {"Type": "vxlan"}}'
#注意,这里设置的网段,跟上面的一样,为什么要设置b类网络:
#     每台node都可以有一个c类网络,上面运行着多个容器
#     能够实现不同node上的容器进行通信,这样就能够打通所有容器间的网络

2.master和node
  安装flannel

  /etc/sysconfig/flanneld
     FLANNEL_ETCD_ENDPOINTS="http://主ip:2379"
  
  systemctl restart flanneld docker    //要先停用docker,用这条命令,自动先关闭docker

四.创建容器测试
  kubectl create -f baseos.yaml    //通过yml文件批量管理容器
  测试
     kubectl get pod -o wide
     kubectl exec -it test-os-3826630470-jc5j4 -- /bin/bash
  
  kubectl create -f kube-dashboard.yaml    //图形化

###############################################################################
