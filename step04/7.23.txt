###############################################################################
命令补充
  uniq -c   //删除重复的内容,并且统计数量,可以先sort再使用 

###############################################################################
Xshell基本使用

1.给所有窗口发送命令
  查看 -> 撰写 -> 撰写栏 -> 全部会话

2.window和linux互传文件
  软件:lrzsz
  下载:rz 文件名   //文件夹需要先打包
  上传:sz          //将要上传的内容拖进屏幕即可

###############################################################################
云上的基本部署

一.基本部署
  跳板机:拥有公网IP,用于管理内部的机器
  调度机:拥有公网IP,用于对外提供服务
  镜像源:用华为内部的镜像源,二级镜像源用跳板机的
          //所以创建跳板机时,要固定一个IP,这样才能给内部提供镜像源
  镜像主机:先在这个主机上进行基本的部署,设置yum源,安装基本的软件版等
           然后关机,然后根据这台制作镜像,下次创建主机用这个镜像就可以了

###############################################################################
负载均衡的选择

1.nginx的特点
  有页面缓存功能,当有这个需求的时候,nginx为首选

2.lvs的特点
  有瓶颈,最多调度二百多台服务器,不建议首选

nat模式:
    进行了地址伪装,把客户端发来的数据包的目标地址伪装成rip,源地址还是cip
    真实服务器进行回复,数据包要先转给调度机,实现的方式是真实服务器把调度机的内网ip设为自己的网关
    数据包经过调度机,调度机将其源地址改为了自己的公网ip
存在的问题:
    调度机的内网ip是真实服务器的网关,所有他们必须在同一个网段,
    因此,最多只能有二百多个真实服务器(这个问题可以利用A类网段解决）
    但是，更主要的问题是，如果有很多主机在同一个网段内，网络性能会下降，而且会产生广播泛滥等问题
    数据包双向穿越调度机,比如千兆网卡,一个1M的页面,并大量达不到100

DR模式:
    调度机通过修改mac地址,将数据包转发给真实服务器,没有改变ip地址
    由于目标ip地址不是真实服务器,如果真实服务器没有这个ip地址,真实服务器是不会响应的
    所以需要将目标ip放在自己的环地址里,就不会影响,而且会接受数据包
    然后之后通过路由回复用户数据包
存在的问题:
    mac地址在二层不能跨越vlan,所有最多只能有二百多个真实服务器(同上。真正的问题不是这个）
解决方法:
    七四层架构
   或LVS-full-nat+OSPF

fullnat模式:
  为了解决上面提到的瓶颈问题,采用的方式就是代理
存在问题:
  数据双向穿越
解决方法:
  多增加几个调度机,连接在三层交换机上,开启ospf路由(然后调度机进行ospf配置,配置一个vip)

3.haproxy和nginx的特点:
  访问方式:
    代理(跑腿代购模式)
  缺点:
    七层调度,性能不好
    双向穿越

###############################################################################
架构思路(七四层架构)
  第一层
    利用nginx或者haproxy进行调度,七层负载均衡,能够跨越不同网段
    多增加几个调度机,怎么让这几个调度机都干活:
      将调度机都接在一个三层交换机上,交换机开启ospf
      调度机进行ospf配置,配置一个vip,实现流量的负载均衡
      即开始使用VIP实现的高可用,即一个主,一个备份,所以只能有一个工作
      现在则是,都是主,通过接在前面路由器上的ospf协议,实现ECMP(等价多路由)
  第二层
    利用LVS,能够提供调度性能

超大型架构:DPDK+LVS-full-nat+OSPF

###############################################################################
