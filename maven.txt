###############################################################################
基本概念

1.maven是一款服务于Java平台的自动化构建工具
2.构建是 以"java源文件","框架配置文件","jsp","html","图片"等资源为原材料，生成一个可以运行的项目的过程
  （1）编译： 源文件(.java) -> 编译 -> 字节码文件(.class) -> 交给JVM执行
  （2）部署：一个BS项目最终运行的不是动态web工程本身，而是这个工程的编译结果
  （3）构建：
3.构建的步骤：
  （1）清理：将以前编译得到的旧的class字节码文件删除，为下一次编译做准备
  （2）编译
  （3）测试：自动调用junit程序进行测试
  （4）报告：测试程序执行的结果
  （5）打包：动态web工程打war包，java工程打jar包
  （6）安装：将打包得到的文件复制到"仓库"中的指定位置
  （7）部署：将动态web工程生成的war包复制到servlet容器的指定目录下，使其可以允许

###############################################################################
maven核心概念

1.约定的目录结构
  xx                              //根目录,即工程名
  |---src                         //源码
  |----|---main                   //存放主程序
  |----|----|---java              //存放java源码
  |----|----|---resources         //存放框架或其他工具的配置文件
  |----|---test                   //存放测试程序
  |----|----|---java              
  |----|----|---resources
  |---pom.xml                     //Maven工程的核心配置文件

2.POM(project object model)
#pom.xml的配置

3.坐标
#使用三个值在仓库中唯一定位一个maven工程
#groupid:公司或组织的域名倒序+项目名
#   <groupid>com.atguigu.maven</groupid>
#artifactid：模块名
#   <artifactid>Hello</artifactid>
#version：版本
#   <version>1.0.0</version>

4.依赖
#在pom.xml配置依赖的moven工程
#会到本地仓库中寻找依赖的maven工程
#依赖的范围：
#  compile        //对 主程序和测试程序 都有效，参与打包
#  test           //对 测试程序 有效，不参与打包
#  provided       //对 主程序和测试程序 都有效，不参与打包

5.仓库:~/.m2/repository
#Maven的核心程序仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成
#当我们执行maven命令需要用到某些插件时，maven会先到本地仓库中查找
#找不到会进行下载
#  指定指定仓库：/etc/maven/settings.xml
#  修改<localRepository>配置项

#仓库的分类：
#  本地仓库
#  私有服务器(Nexus)  //私服假设在局域网内,如果我们需要的插件他没有,他会去下载然后提供
#  中央仓库
#  中央仓库镜像

#仓库中保存的内容：Maven工程
#  maven自身所需要的插件
#  第三方框架或工具的jar包
#  我们自己开发的maven工程  

6.生命周期/插件/目标

7.继承

8.聚合

###############################################################################
maven命令

执行与构建过程的命令，必须进入pom.xml所在的目录

1.mvn clean                 //清除编译好的文件，删除target目录

2.mvn compile               //编译主程序,在target目录下生成主程序的编译文件

3.mvn test-compile          //编译测试程序,在target目录下生成测试程序的编译文件

4.mvn test                  //执行测试

5.mvn package               //执行打包,在target目录下生成jar包

6.mvn install               //将此maven项目安装到本地仓库中,就可以被依赖

###############################################################################
