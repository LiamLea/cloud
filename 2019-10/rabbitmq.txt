###############################################################################
基础概念

1.guest用户
  是超级管理员

2.virtual hosts   
  相当数据库，对不同用户有不同的权限

3.channel（信道）
  每个线程把持一个信道，所以信道复用了 Connection 的 TCP 连接
  同时 RabbitMQ 可以确保每个线程的私密性，就像拥有独立的连接一样
  当每个信道的流量不是很大时，复用单一的 Connection 可以在产生性能瓶颈的情况下有效地节省 TCP 连接资源
  但是信道本身的流量很大时，这时候多个信道复用一个 Connection 就会产生性能瓶颈，进而使整体的流量被限制了

3.缩写
  p：produce
  c：consume
  x：exchange，交换机

4.autoAck（消费者的自动应答模式）
  一旦队列将消息分发给消费者，消费者收到消息会立即应答队列，队列就会从内存中删除该消息，不管是否成功处理了该消息
  关闭自动应答，可以解决消费者挂掉的问题

5.durable（消息的持久化）
  声明好的队列，就不能改了
  解决rabbitmq服务器挂掉的问题

6.rabbitmq不允许重新定义一个队列
  即，不能更改队列的特性，如消息的持久化特性等

6.exchange类型
（1）fanout
  不处理路由键，会将消息发给与之绑定的所有队列
（2）direct
  处理路由键，会将消息发给与之绑定的且路由键相同的队列
（3）topic
  处理路由键，队列的路由键利用通配符进行设置

7.channel的transaction模式
  一旦消息错误，可以回滚，这样就不会把错误的消息发送到队列中

8.channel的confirm模式（这个模式是异步的）
  一旦信道进入confirm模式，所有在该信道上发布的消息都会被指派一个唯一的id
  一旦消息被投递到所匹配的队列后，broker就会发送确认给生产者

###############################################################################
简单队列

1.简单队列模型
  p -> queue -> c

2.生产者
（1）连接rabbitmq
（2）从连接中获取一个channel
（3）声明使用的queue（没有会创建）
（4）发送消息到queue

3.消费者
（1）连接rabbitmq
（2）从连接中获取一个channel
（3）声明queue（防止没有指定队列，下面就会报错）
（4）监听指定queue

4.缺点
  耦合性高，生产者一一对应消费者
  队列名变更，这时候得同时变更

###############################################################################
工作队列（work queues）

1.工作队列
                      -> c1
  p -> queue  -> c2
                      ... ...

2.轮询分发（round-robin)
  即，当有多个消费者监听同一个队列时，第一个消息分发给c1，第二个消息分发给c2，以此类推，不管消费者忙不忙

3.fair dispatch（公平分发）
  即，消费者处理完消息后，队列才会给消费者发消息
（1）创建队列时，限制发送给同一消费者的消息条数
（2）消费者需要关闭自动应答模式，处理完消息后通知队列，队列才会继续给消费者发送消息

###############################################################################
publish_subscribe（订阅模式，一个消息能分发给多个消费者）

1.订阅模式模型
             -> queue1 -> c1
  p -> x -> queue2 -> c2
             ... ...

2.特点
  每个消费者都要一个自己的队列

3.生产者
（1）连接rabbitmq
（2）从连接中获取一个channel
（3）声明exchange
（4）发送消息到exchange

4.消费者
（1）连接rabbitmq
（2）从连接中获取一个channel
（3）声明queue
（4）将queue与某个exchange绑定
（5）监听queue

###############################################################################