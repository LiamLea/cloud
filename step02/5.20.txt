###############################################################################
单词积累:
  regex:regular expression
  upstream   上行
  正向代理:为客户端作代理
  反向代理:为服务端作代理

###############################################################################
地址重写(地址栏根路径被改写,可以在站内跳,也可以往站外跳)

  rewrite regex replacement [flags]

如:rewrite /a\.html$ /b.html     //只要在地址栏中输入/a.html都替换,不需要存在a.html
   rewrite ^/ http://www.tmooc.cn   //往站外跳
   rewrite ^/(.*) http://www.tmooc.cn/$1   //不同网站下相同的页面
   if ($http_user_agent ~* firefox) {      //~代表模糊匹配,*代表不区分大小写
      rewrite ^/(.*) /firefox/$1;         //不同方式访问同一个地址给出不同内容
   }

选项:
  last           //不再读其他rewrite
  break          //不再读其他语句
  redirect        //临时重定向,不加这个选项显示的地址栏还是/a.html,加了选项显示的地址栏就变为/b.html
  permanent       //永久重定向,这两个选项不是给用户看的,是给搜索引擎看的

###############################################################################
nginx反向代理    //nginx两大功能:web服务器,代理服务器

代理服务器的功能:调度(负载均衡),健康检查

调度算法:
  轮询(roundrobin,RR)
  ip_hash       //一个客户端第一次访问,将它与一个服务器对应,以后来自该客户端的请求都转发给该服务器
                //原理:将ip地址转换为MD5码,然后用MD5取余(%)服务器数,然后根据取余的结果选择服务器

一.web服务器代理
  1.定义集群
    http{
      upstream 集群名称{
        ip_hash;       //不加这个选项,默认采用轮询调度算法
        server 服务器ip地址:端口 属性;
        ...
      }
    }
  #属性:
  #  weight=n    //默认位1,数值越大,比重越大,访问次数越多
  #  max_fails=n   //最大失败次数,超过n次,则认为该服务器down了
  #  fail_timeout=n  //检测出该服务器down了之后,过n秒再次检测
  #  down      //标记该服务器永远down了
  
  2.将用户请求转发给集群
    location / {
      ...
      proxy_pass http://集群名;
      ...
    }

二.TCP,UDP代理(4层代理,能够实现其他服务的代理)

###############################################################################
