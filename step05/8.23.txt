###############################################################################
制作后端盘

1.创建一个虚拟机，并在其中操作，然后把这个盘作为后端盘

2.对虚拟机剩余空间进行写零操作
#基本原理是向磁盘中写入一个全0的文本文件，直到磁盘被填充满，然后将文件删除
  dd if=/dev/zero of=/zero.dat

3.对qcow2镜像进行压缩，生成新的镜像
  qemu-img convert -c -O qcow2 xx yy       //c:compress,压缩
                                          //O:out_format

###############################################################################
架构思路(从上到下)

1.高可用层

2.缓存层
  redis等，用于缓存经常访问的数据

3.调度层

4.应用层
  nginx等网站服务器
  mysql等数据库服务器

5.存储层
  ceph，nfs等，用于存储图片，视频等
  不会把这些存储到数据库，否则读取效率会很慢，数据库一般只会存储他们的地址

###############################################################################
补充

1.数据备份的4种方式：
  mysqldump
  innobackupex
  binlog
  主从同步

###############################################################################
ansible动态主机清单

1.创建ansible.cfg文件
  [defaults]
  inventory = xx.py
  remote_user=root
  host_key_checking=False

2.创建动态主机脚本:xx.py
#输出的数据类型必须是json,格式如下：
#{
#    "组1": {"hosts": ['主机1', '主机2']},
#    "组2": {"hosts": ['主机3', '主机4']},
#}
#
  #!指定python解释器
  ... ...
  if __name__ == '__main__':
      ... ...
      result = {}
      for group, ip in qset:
          if group not in result:
              result[group] = {}  # {'dbservers': {}}
              result[group]['hosts'] = []  # {'dbservers': {'hosts': []}}
          result[group]['hosts'].append(ip)
      print(json.dumps(result))

3.赋予动态主机清单执行权限
  chmod +x xx.py

4.测试
  ansible all -m ping 

###############################################################################
