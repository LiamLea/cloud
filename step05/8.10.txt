###############################################################################

1.将某个描述符与指定文件相关连:
  exec 5<>test.txt   //将文件描述符5与test.txt相关联
  echo aa >&5       //将内容重定向到test.txt
  cat <&5           //从test.txt读入,只能读一次,还要使用需要重新关联
  exec 5>&-         //关闭关联,或者使用:exec 5<&-  

2.利用文件进行网络通信(本质是新建了一个socket文件,用于网络通信)
  echo xx >/dev/tcp/ip地址或主机名/端口后  //即可利用tcp协议发送数据到该端口

###############################################################################
python软件包管理

python的官方模块文件站点:pypi.org

1.pip install 模块名

2.设置使用国内的镜像站点
  mkdir -p ~/.pip
  vim ~/.php/pip.conf
    [global]
    index-url=http://pypi.douban.com/simple/
    [install]
    trusted-host=pypi.douban.com

#建议安装在虚拟环境下,即进入虚拟环境后进行安装
#python3的命令是:pip3

3.在线安装
  pip install 模块名

4.本地安装(切换到有模块的目录下)
  pip install *

###############################################################################
列表的排序

#元组等不可以排序,因为是不可变对象
#字典也没有排序,需要转换成列表:list(adict.items())

xx.sort(key=None,reverse=False)   //一般函数用lambda

sort可以传入一个函数(即c++中的谓词), key=函数名
该函数将列表中的每一项进行处理,处理的结果作为排序的依据

###############################################################################
建表规划

1.建表需求:

姓名、性别、职位、部门、联系方式、出生日期、工资日、基本工资、奖金、实发工资

2.关系型数据库，应该尽量减少数据冗余。为了消除冗余，可以把数据放到不同的表中。

员工表：姓名、性别、职位、部门、联系方式、出生日期
工资表：姓名、工资日、基本工资、奖金、实发工资

3.关系型数据的范式

  第一范式:数据库表的每一列都是不可分割的原子数据项
    联系方式可以拆为：email / 电话号码 / 家庭住址

  第二范式:简单来说，就是需要有个主键。
    员工表需要添加员工ID作为主键
    工资表用哪个作为主键都不合适，可以单独添加一个id作为主键

  第三范式:非主属性不能依赖于其他非主属性。
    工资表中，实发工资依赖于基本工资和奖金，它不应该出现在表中，需要用的时候，通过程序临时计算。

4.最终的表:
  员工表：员工ID、姓名、性别、职位、部门ID、email、phone、出生日期
  部门表：部门ID、部门名称
  工资表：id、员工ID、工资日、基本工资、奖金

###############################################################################
pymysql模块

1.操作数据库的步骤
(1)建立连接:
  conn=pymysql.connect(...)
(2)创建操作数据库的游标(相当于操作文件时的文件对象)
  cursor=conn.cursor()
(3)通过游标执行sql语句
  cursor.execute("sql语句")
(4)如果涉及对数据库的修改,需要执行commit
  conn.commit()
(5)关闭游标,关闭连接
  cursor.close()
  conn.close()

2.增加数据
  insert='insert into table1 values(%s,%s)'
  value1=(10,'c')
  value2=[(1,'a'),(2,'b')]
  cursor.execute(insert,value1)     //当只需要执行一次时
  cursor.executemany(insert,value2)   //第二个参数为可迭代对象

3.查询数据
  select='select * from table1'
  cursor.execute(select)      //通过游标获得查询结果
  cursor.fetchone()           //取出一条数据,取出后游标向下移动(类似于文件指针)
  cursor.fetchmany(2)         //取出2条数据
  cursor.fetchall()           //取出所有数据

4.修改数据
  update='update table1 set xx=%s where xx=%s'
  data=('a','b')
  cursor.execute(data)

5.删除数据
  delete='delete from table1 where id=%s'
  data=(6,)
  cursor.execute(delete,data)
  
###############################################################################
sqlalchemy模块

#能够访问任何关系数据库,只要修改引擎即可

1.ORM:object relationship map,对象映射关系
  映射类               关联到  表
  映射类中的变量       关联到  表中的字段
  映射类的实例         关联到  表的记录
  模块中的column类     关联到  表中的每个字段
  模块中的Interger类   关联到  int字段类型
  模块中的String类     关联到  varchar字段类型     

2.创建表的步骤
(1)创建引擎(即连接数据库)
engine=create_engine(
    'mysql+pymysql://root:123456@192.168.1.23/tedu1903?charset=utf8',
    encoding='utf8',
)

(2)创建基类
Base=declarative_base()

(3)创建映射类(即定义表)
class Departments(Base):
    __tablename__='departments'
    dep_id=Column(Integer,primary_key=True)
    dep_name=Column(String(20),unique=True)

(4)执行创建表的操作
if __name__ == '__main__':
    Base.metadata.create_all(engine)

3.增删改查的框架
  Session=sessionmaker(bind=engine)
  session=Session()
  增删改查
  session.commit()
  session.close()

4.添加数据
(1)实例化相应的映射类
(2)实例化Session类
  session.add(列表)

5.查询数据:
  session.query(映射类)  //返回一个实例的可迭代对象,结果就保存在实例的属性中
  session.query(类的属性1, ...)  //返回元组构成的查询集

6.修改和查询
  先查询到实例,然后进行修改后删除
  qset=session.query(table1).filter(id=1)
  item=qset.one()
  item.name='修改值'

  session.delete(item)  //删除该行记录

###############################################################################
