###############################################################################
补充

1.如果需要在局部改变全局变量,使用global关键字
  def func():
    global x
    x=1000       //则全局的变量x就会变为1000

2.return m if x>5 else n    //如果x>5返回m,否则返回n

3.int指定进制
  int('11',base=2)   //表示11为2进制数,返回的结果为3

###############################################################################
函数

1.传参的方式:
  def func(name,age,hobby):
    ...

(1)全部使用值的方式(必须按照顺序)
   func('liyi',20,'book')

(2)全部使用键值对的方式(不需要按照顺序)
   func(hobby='book',name='liyi',age=20)

(3)值和键值对结合的方式(值必须写在最前面,且按照顺序)
   func('liyi',hobby='book',age=20)

2.使用参数组表示函数的形参(当不知有多少参数和参数的具体类型时使用)
(1) * 表示使用元组接收参数
    def func(*targs):
      print(targs)
    func(1,2)      //输出(1,2)
       
(2) ** 表示使用字典接收参数
    def func(**kwargs):
      print(kwargs)
    func(name='liyi',age=20)   //输出:{'name':'liyi','age':20}

(3)可以混合使用
    def func(*targs,**kwargs):   //字典参数组必须写在后面
      ...

3.传参的时候,可以用 * 将序列拆开,用 ** 将字典拆开
  def add(a,b):
    return a+b
  alist=[10,20]
  adict={'a':1,'b':2}
  add(*alist)
  add(**adict)

###############################################################################

1.匿名函数:用lambda声明
  f=lambda x:x+10   //f(1)返回11
  f=lambda x,y:x+y   //f(1,2)返回3

2.filter函数(用于过滤数据)
#第一个参数是函数,返回值必须是True或False
#第二个参数是序列对象
#把序列对象中的每一个元素传递给函数,结果为True的保留
  nums=[11,22,33,44,55,66,77,88,99]
  list(filter(lambda x:True if x>50 else False,nums))
  list(filter(lambda x:x%2,nums))   //过滤出奇数

3.map函数(加工数据)
#第一个参数是函数,用于加工数据
#第二个参数是序列
  list(map(lambda x:x*2,nums))

4.偏函数(改造现有函数,将其一些参数固定下来,生成新的函数)
  import functools
  def add(a,b,c,d,e):
    return a+b+c+d+e
  functools.partial(add,10,20,30,40)  //将add的前4个参数固定下来

#改造int函数
  int2=functools.partial(int,base=2)
  int8=functools.partial(int,base=8)

###############################################################################
