###############################################################################
命令补充

1.vim tab键的设置(每一项都要设置,否则在其他地方会显示异常):
  set tabstop=2    //相当于\t等于2个空格
  set softtabstop  //在插入模式下,按下tab键的空格长度
  set expandtab    //将空白位用空格填充

###############################################################################
time模块

1.时间表示方式:
  时间戳: 1970-1-1 00:00:00到某一时间点之间的秒数
  UTC时间:世界协调时
  9元组:返回一个元组,有9个属性

2.时间戳:time()

3.UTC:ctime()

4.9元组:localtime()   //tm_year,tm_mon,tm_mday,tm_hout,tm_min,tm_sec,tm_wday,tm_yday

#上面的时间表示方式可以相互转换,且可以比较大小

5.sleep(n)    

6.strftime('%Y-%m-%d %H:%M:%S %a')    //按特定格式输出 时间字符串,%a代表星期的缩写

7.strptime('2019-01-01','%Y-%m-%d')   //将 时间字符串 转换成9元组

###############################################################################
datatime模块

1.t=datetime.datetime.now()    
//t为datetime对象,属性:year,month,day,hour,minute,second,microsecond

2.t.strftime('%Y-%m-%d %H:%M%S')   //将 datatime对象 转换成 时间字符串

3.datetime.datetime.strptime('2019-01-01','%Y-%m-%d')      //将 时间字符串 转换成datatime对象

4.100天3小时之前的时间
  days=datetime.timedelta(days=100,hours=3)
  t=datetime.datetime.now()
  t-days

###############################################################################
异常处理

1.常见异常
  NameError              //没有声明或初始化对象
  IndexError
  SyntaxError           //语法错误
  KeyboardInterrupt     //用户终端(按ctrl+c)
  EOFError              //读到EOF(按ctrl+d)
  IOError               /输入/输出操作失败

2.处理异常
  try:
    ...               //可能发生异常的程序,不会发生异常的不要放在里面
  except xx:          //多个异常:(xx1,xx2,..)
    ...               //捕获异常
  else:               //不发生异常会执行
    ...
  finally:            //无论如何都会执行
    ...
  ...                 //继续执行下面的程序,除非上面指明退出(exit())

3.触发异常(自己编写)
如:
  if n>200:
    raise ValueError('n的值超过了200')

或者使用 断言异常:

  assert n<=200,'n的值超过了200'    //这里产生的异常是:AssertionError

###############################################################################
OS模块

1.相关函数
  getcwd()            //相当于pwd
  listdir()     
  listdir('xx')
  mkdir('xx')
  makedirs('xx')      //相当于mkdir -p
  chdir('xx')         //相当于cd xx
  symlink('xx','yy')  //相当于 ln -s xx yy
  remove('xx')
  rmdir('xx')         //只能删除空目录
  
  path.basename('/tmp/abc.txt')   //返回文件名部分:abc.txt
  path.dirname('/tmp/abc.txt')    //返回路径部分:/tmp
  path.abspath('.')               //返回绝对路径:/tmp
  path.split('/tmp/abc.txt')      //切割:('/tmp','abc.txt')
  path.join('/tmp','abc.txt')     //拼接:/tmp/abc.txt
  
  path.isabs('xx')    //是绝对路径吗
  path.isfile('xx')   //存在并且是文件吗
  path.ismount('xx')  //是挂在点吗
  path.isdir('xx')    //存在并且是目录吗
  path.islinke('xx')  //存在并且是链接吗
  path.exists('xx')   //存在吗

###############################################################################
pickle模块

可以将任意数据类型写入到文件,并且可以无损的取出(必须以字节方式读写)
常规的文件操作,只能把字符写入文件,不能写其他数据类型

1.写入特定类型到文件
  alist=['a','b']
  with open('xx','wb') as fobj:
    pickle.dump(alist,fobj)

2.读取文件中的特定类型
  with open('xx','rb') as fobj:
    blist=pickle.load(fobj)

###############################################################################
