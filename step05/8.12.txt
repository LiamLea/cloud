###############################################################################
补充

1.source   //在当前进程执行
  bash     //会fork一个子进程执行,使用bash解释器
  ./       //会fork一个子进程执行,使用声明的解释器

###############################################################################
多进程编程

解决效率问题
windows系统不知道多进程,只支持多线程
每个进程都有自己独立的运行环境

一.进程的生命周期

  --> parent process ----------------------> parent process
            |                                     .
            |fork()                               |
            .                                     |
      child process ---> child process ---> zomble process
                   exec()              exit()

二.多进程执行

1.for i in range(3):
    retval=os.fork()
    if retval==0:
      print('hello')

#打印7个hello

2.for i in range(3):
    retval=os.fork()
    if retval=0:
      print('hello')
      exit()

#打印3个hello,注意两者的区别

三.僵尸进程
1.产生原因:
  子进程的程序运行结束,就会变为僵尸进程
2.处理:
  父进程可以用wait等待子进程结束  
#waitpid可以等待指定进程,也可以不阻塞,若有则处理,若没有则继续执行,之后出现了也不处理
#父进程结束后,如果还存在僵尸进程,就交给init处理
  或者杀死僵尸进程的父进程(不推荐,因为这样程序就终止了)

###############################################################################
多线程编程

1.使用threading模板
  t=threading.Thread(target=函数名,args=(参数1,)) 
  t.start()
#如果一个参数,不加括号,则会把字符串转换为元组,即每一个字符是一个元素,就会出错

###############################################################################
