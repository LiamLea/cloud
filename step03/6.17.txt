###############################################################################
MySQL读写分离(前提是有主从服务器)

读写分离:把客户端访问时的查询请求和写入请求分别给不同的数据库服务器处理
主从同步局限性:客户端必须访问主库
数据读写分离优点:减轻主服务起的压力,提高从服务器的硬件利用率
实现读写分离的方式:
  通过编写客户端代码实现
  在服务器部署数据读写分离服务(添加代理服务器,进行读写分离)


###############################################################################
利用maxscale软件配置读写分离

1.代理服务器上装包
2.修改配置文件:/etc/maxscale.cnf
  [maxsacle]
  threads=auto    //根据cpu性能创建线程

  [server数字]    //有多少台服务器,就写多少个server
  type=server
  address=xx
  port=3306
  protocol=MySQLBackend

  [MySQL Monitor]
  ...
  servers=server1,server2,...
  user=maxscalemon     //监控用户,之后需要在每个mysql服务器上授权该用户
  passwd=123qqq...A
  ...

  [Read-Only Service]  //只读服务,把这些都注释到
  ...

  [Read-Write Service]   //定义读写分离服务
  ...
  servers=server1,server2,...
  user=maxscalerouter    //路由用户,需要在每个mysql服务器上授权路由用户,用于验证客户端请求登录的用户是否在服务器上存在
  module=
  passwd=123qqq...A
  ...

  [Read-Only Listener]  //这些都注释掉
  ...

  [Read-Wirte Listener]
  ...
  port=4006      //读写分离的端口号,不用修改

  [MaxAdmin Listener]
  ...
  port=4016      //管理服务的端口号

3.创建监控用户和路由用户
#只需要在主库上创建,从库会进行同步
  grant replication slave,replication client on *.* to maxscalemon@"%" identified by "123qqq...A";
  grant select on mysql.* to maxscalerouter@"%" identified by "123qqq...A";

4.代理服务器启动读写分离服务
  maxscale -f /etc/maxscale.cnf

5.测试配置
  maxadmin -uadmin -pmariadb -P4016   //进入管理页面
#利用/var/log/maxscale/maxscale.log日志排错

6.客户端连接
  mysql -hIP地址 -P4006 -u用户 -p密码
#注意:该用户必须具有远程可以连接的权限,root用户远程不可以连接,所以要用root用户连接,需要修改其连接主机

###############################################################################
MySQL多实例

多实例:在一台物理主机上运行多个数据库服务
为什么使用多实例:节约运维成本,提高硬件利用率

###############################################################################
配置多实例

1.安装支持多实例的mysql软件
    mysql-5.7.20 tar包
    解压到/usr/local/目录下,改名为mysql

2.创建配置文件:/etc/my.cnf
  [mysqld_multi]                            //启动多实例
  mysqld=/usr/local/mysql/bin/mysqld_safe   //指定进程文件路径
  mysqladmin=/usr/local/mysql/bin/mysqladmin //指定管理命令路径
  user=root                                 //指定进程用户

  [mysqld数字]                    //有几个实例,就写几个[mysqld数字]
  port=3307                       //端口号,每个实例都不一样
  datadir=/dir数字              //数据库目录,要手动创建,每个实例都不一样
  socket=/dir数字/mysql.sock     //指定sock文件的路径和名称
  pid-file=/dir数字/mysqld.pid
  log-error=/dir数字/mysqld.err

#将/usr/local/mysql/bin路径添加到系统变量中
3.启动服务
  mysqld_multi start 数字    //数字是表示启动哪个实例
#根据错误进行相应操作,直至启动服务

4.客户端访问
  mysql -uroot -p初始密码 -S sock文件
#登录后首先修改密码

5.停止实例
  mysqld_multi --user=root --password=密码 stop 数字

###############################################################################

