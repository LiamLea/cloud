###############################################################################
PXC

Percona XtraDB Cluster,用于mysql的高可用集群

特点:
  数据强一致性,无同步延迟
  没有主从切换操作,不需要vip
  多线程复制
  节点自动加入,无需手动拷贝数据

SST:state snapshot transfer   全量同步
IST:incremental state transfer  增量同步

软件:
  percona-xtrabackup    //在线热备程序
  qpress                //递归压缩程序
  Percona-XtraDB-Cluster-server   //集群服务程序
  Percona-XtraDB-Cluster-*   //其他相关软件

配置文件:
  mysqld.cnf    //数据库服务运行参数配置文件
  mysqld_safe.cnf  //Percona server配置文件
  wsrep           //write-set replication,PXC集群配置文件

###############################################################################
部署PXC

1.修改数据库服务运行参数配置文件:mysqld.cnf
  server-id=xx     //每个服务器上的都不一样即可

2.修改Percona Server配置文件:mysqld_safe.cnf
#不用修改,只要查看mpid-file和socket选项

3.修改PXC集群配置文件:wsrep.cnf
  wsrep_cluster_address=gcomm://ip地址    //成员ip地址用逗号隔开
  wsrep_node_address=本机ip
  wsrep_node_name=主机名
  wsrep_cluster_name=xx
  wsrep_sst_auth="用户名:密码"        //SST数据同步授权用户

4.启动集群服务
  systemctl start mysql@bootstrap.service

#对某个多数据库的操作,会自动同步到所有数据库服务器
5.登录mysql
#初始登录密码在/var/log/mysqld.log中

6.授权同步用户
  grant reload,lock tables,replication client,process 
  on *.* 
  to sstuser@"localhost" ...;

7.启动其他数据库服务
  systemctl start mysql

###############################################################################
MySQL存储引擎
不同的存储引擎有不同的功能和数据存储方式

1.相关命令:
  show engines;
  alter table 表 engine=xx    //修改表的引擎
 
2.修改服务的默认存储引擎
#vim /etc/my.cnf
  [mysqld]
  default-storage-engine=myisam

3.myisam存储引擎
  支持表级锁
  不支持事务,事务回滚,外键
  表文件:xx.frm   //存储表结构
         xx.MYI   //存储表索引
         xx.MYD   //存储表数据

4.innodb存储引擎
  支持行级锁
  支持事务,事务回滚,外键
  表文件:xx.frm
         xx.ibd
  事务日志:ibdata1
           ib_logfile0
           ib_logfile1

5.引擎的选择
  myisam  适合查询操作多的表,节省硬件资源
  innodb  适合写操作多的表,并发访问量大

###############################################################################

一.锁机制  //用于解决并发访问的冲突
1.锁粒度(对表加锁的一个范围)
    表级锁:对整张表加锁
    行级锁:仅对被访问的行加锁
2.锁类型
    读锁:支持并发读,但不能写       //select时会加读写
    写锁:是独占锁,上锁期间其他线程不能读也不能写  //修改数据时会加写锁

二.事务    
事务:一个对数据库操作的序列    //只对数据而言,对库表进行删除创建等不需要提交就生效
事务特性:原子性
         一致性     //提交之前,表中的记录没有变化
         隔离性    //事务操作是相互隔离不受影响的
         持久性    //数据一旦提交,永久改变表数据

三.测试
1.查看是否开启自动提交
  show variables like "autocommit";
2.关闭自动提交
  set autocommit=off;    //只对当前客户端有效
3.回滚
  rollback;
4.提交
  commit;

###############################################################################
