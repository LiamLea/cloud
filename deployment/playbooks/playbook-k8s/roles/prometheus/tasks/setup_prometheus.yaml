- name: install prometheus
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.chart.repo }}"
    chart_version: "{{ monitor.prometheus.chart.version }}"
    release_name: "{{ monitor.prometheus.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      alertmanager:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/alertmanager"
        persistentVolume:
          storageClass: "{{ monitor.storage_class }}"
        prefixURL: "/alertmanager"
        baseURL: "http://localhost:9093/alertmanager"
        ingress:
          enabled: "{{ ingress.enabled }}"
          annotations:
            cert-manager.io/cluster-issuer: "{{ ingress.cluster_issuer }}"
          ingressClassName: "{{ ingress.class_name }}"
          hosts:
          - "{{ ingress.hosts['alertmanager'].host }}"
          path: "{{ ingress.hosts['alertmanager'].path }}"
          tls:
          - secretName: "{{ ingress.hosts['alertmanager'].host }}"
            hosts:
            - "{{ ingress.hosts['alertmanager'].host }}"
      configmapReload:
        prometheus:
          image:
            repository: "{{ monitor.repository }}jimmidyson/configmap-reload"
        alertmanager:
          image:
            repository: "{{ monitor.repository }}jimmidyson/configmap-reload"
      nodeExporter:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/node-exporter"
        tolerations:
        - operator: "Exists"
      server:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/prometheus"
        persistentVolume:
          storageClass: "{{ monitor.storage_class }}"
          size: "10Gi"
        prefixURL: "/prometheus"
        baseURL: "{{ monitor.prometheus.config.external_url }}"
        global:
          scrape_interval: "{{ monitor.prometheus.config.scrape_interval }}"
        ingress:
          enabled: "{{ ingress.enabled }}"
          annotations:
            cert-manager.io/cluster-issuer: "{{ ingress.cluster_issuer }}"
          ingressClassName: "{{ ingress.class_name }}"
          hosts:
          - "{{ ingress.hosts['prometheus'].host }}"
          path: "{{ ingress.hosts['prometheus'].path }}"
          tls:
          - secretName: "{{ ingress.hosts['prometheus'].host }}"
            hosts:
            - "{{ ingress.hosts['prometheus'].host }}"
      pushgateway:
        image:
          repository: "{{ monitor.repository }}prom/pushgateway"
          persistentVolume:
            storageClass: "{{ monitor.storage_class }}"
      kube-state-metrics:
        image:
          repository: "{{ monitor.repository }}k8s.gcr.io/kube-state-metrics/kube-state-metrics"
      serverFiles:
        prometheus.yml: "{{ __config_prometheus }}"
        alerting_rules.yml: "{{ __config_alerting_rules }}"
      alertmanagerFiles:
        alertmanager.yml: "{{ __config_alertmanager }}"

- name: install blackbox-exporter
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.blackbox.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.blackbox.chart.repo }}"
    chart_version: "{{ monitor.prometheus.blackbox.chart.version }}"
    release_name: "{{ monitor.prometheus.blackbox.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      fullnameOverride: blackbox
      image:
        repository: "{{ monitor.repository }}prom/blackbox-exporter"
      service:
        port: 80
      config:
        modules:
          http_2xx:
            http:
              tls_config:
                insecure_skip_verify: true

- name: install prometheus-adapter
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.adapter.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.adapter.chart.repo }}"
    chart_version: "{{ monitor.prometheus.adapter.chart.version }}"
    release_name: "{{ monitor.prometheus.adapter.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      image:
        repository: "{{ monitor.repository }}k8s.gcr.io/prometheus-adapter/prometheus-adapter"
      prometheus:
        url: http://prometheus-server
        port: 80
        path: /prometheus
      rules: "{{ __config_prometheus_adapter_rules }}"
      logLevel: 2

- name: install grafana
  environment: "{{ __proxy_env | default(omit) }}"
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.grafana.chart.path }}"
    chart_repo_url: "{{ monitor.prometheus.grafana.chart.repo }}"
    chart_version: "{{ monitor.prometheus.grafana.chart.version }}"
    release_name: "{{ monitor.prometheus.grafana.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      image:
        repository: "{{ monitor.repository }}grafana/grafana"
      testFramework:
        image: "{{ monitor.repository }}bats/bats"
      downloadDashboardsImage:
        repository: "{{ monitor.repository }}curlimages/curl"
      persistence:
        enabled: true
        storageClassName: "{{ monitor.storage_class }}"
      initChownData:
        image:
          repository: "{{ monitor.repository }}busybox"
      grafana.ini:
        server:
          root_url: "%(protocol)s://%(domain)s/grafana"
          serve_from_sub_path: true
      adminPassword: admin
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
          - name: Prometheus
            type: prometheus
            url: http://prometheus-server/prometheus
            access: proxy
            isDefault: true

      dashboardProviders:
       dashboardproviders.yaml:
         apiVersion: 1
         providers:
         - name: 'default'
           orgId: 1
           folder: ''
           type: file
           disableDeletion: false
           editable: true
           allowUiUpdates: true
           options:
             path: /var/lib/grafana/dashboards/default

      dashboards: "{{ monitor.prometheus.grafana.dashboards }}"

      ingress:
        enabled: "{{ ingress.enabled }}"
        annotations:
          cert-manager.io/cluster-issuer: "{{ ingress.cluster_issuer }}"
        ingressClassName: "{{ ingress.class_name }}"
        hosts:
        - "{{ ingress.hosts['grafana'].host }}"
        path: "{{ ingress.hosts['grafana'].path }}"
        tls:
        - secretName: "{{ ingress.hosts['grafana'].host }}"
          hosts:
          - "{{ ingress.hosts['grafana'].host }}"
