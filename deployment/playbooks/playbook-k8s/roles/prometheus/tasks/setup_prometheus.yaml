- name: install prometheus
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.chart.path }}"
    chart_repo_url: "{{ chart.repo['prometheus-community'] }}"
    chart_version: "{{ monitor.prometheus.chart.version }}"
    release_name: "{{ monitor.prometheus.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      alertmanager:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/alertmanager"
        persistentVolume:
          storageClass: "{{ monitor.storage_class }}"
        prefixURL: "/alertmanager"
        baseURL: "http://localhost:9093/alertmanager"
      configmapReload:
        prometheus:
          image:
            repository: "{{ monitor.repository }}jimmidyson/configmap-reload"
        alertmanager:
          image:
            repository: "{{ monitor.repository }}jimmidyson/configmap-reload"
      nodeExporter:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/node-exporter"
        tolerations:
        - operator: "Exists"
      server:
        image:
          repository: "{{ monitor.repository }}quay.io/prometheus/prometheus"
        persistentVolume:
          storageClass: "{{ monitor.storage_class }}"
        prefixURL: "/prometheus"
        baseURL: "/prometheus"
      pushgateway:
        image:
          repository: "{{ monitor.repository }}prom/pushgateway"
          persistentVolume:
            storageClass: "{{ monitor.storage_class }}"
      kube-state-metrics:
        image:
          repository: "{{ monitor.repository }}k8s.gcr.io/kube-state-metrics/kube-state-metrics"
      serverFiles:
        prometheus.yml:
          scrape_configs:
          - job_name: prometheus
            metrics_path: "prometheus/metrics"
            static_configs:
              - targets:
                - localhost:9090

          - job_name: 'kubernetes-apiservers'
            kubernetes_sd_configs:
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                action: keep
                regex: default;kubernetes;https

          - job_name: 'kubernetes-nodes'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$1/proxy/metrics

          - job_name: 'kubernetes-nodes-cadvisor'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

          - job_name: 'kubernetes-service-endpoints'
            honor_labels: true
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                action: drop
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: service
              - source_labels: [__meta_kubernetes_pod_node_name]
                action: replace
                target_label: node

          - job_name: 'kubernetes-service-endpoints-slow'
            honor_labels: true
            scrape_interval: 5m
            scrape_timeout: 30s
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: service
              - source_labels: [__meta_kubernetes_pod_node_name]
                action: replace
                target_label: node

          - job_name: 'prometheus-pushgateway'
            honor_labels: true
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: pushgateway

          - job_name: 'kubernetes-pods'
            honor_labels: true
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                action: drop
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                action: replace
                regex: (https?)
                target_label: __scheme__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
              - source_labels: [__meta_kubernetes_pod_phase]
                regex: Pending|Succeeded|Failed|Completed
                action: drop

          - job_name: 'kubernetes-pods-slow'
            honor_labels: true
            scrape_interval: 5m
            scrape_timeout: 30s
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                action: replace
                regex: (https?)
                target_label: __scheme__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
              - source_labels: [__meta_kubernetes_pod_phase]
                regex: Pending|Succeeded|Failed|Completed
                action: drop

          #service must have the annotation: prometheus.io/probe: "true"
          #if there is path(starting with /), add the annotation: prometheus.io/path: <path>
          - job_name: 'kubernetes-services'
            honor_labels: true
            metrics_path: /probe
            params:
              module: [http_2xx]
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_path]
                separator: ""
                target_label: __address__
              - source_labels: [__address__]
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                target_label: service

          - job_name: 'http-probe'
            metrics_path: /probe
            params:
              module: [http_2xx]
            static_configs:
              - targets: "{{ monitor.prometheus.config.http_probe }}"
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: blackbox

          - job_name: 'icmp-probe'
            metrics_path: /probe
            params:
              module: [icmp]
            static_configs:
              - targets: "{{ monitor.prometheus.config.icmp_probe }}"
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: blackbox

          - job_name: 'tcp-probe'
            metrics_path: /probe
            params:
              module: [tcp_connect]
            static_configs:
              - targets: "{{ monitor.prometheus.config.tcp_probe }}"
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: blackbox

          - job_name: node-exporter
            static_configs:
              - targets: "{{ __node_exporter }}"

- name: install blackbox-exporter
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.blackbox.chart.path }}"
    chart_repo_url: "{{ chart.repo['prometheus-community'] }}"
    chart_version: "{{ monitor.prometheus.blackbox.chart.version }}"
    release_name: "{{ monitor.prometheus.blackbox.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      fullnameOverride: blackbox
      image:
        repository: "{{ monitor.repository }}prom/blackbox-exporter"
      service:
        port: 80

- name: install prometheus-adapter
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.adapter.chart.path }}"
    chart_repo_url: "{{ chart.repo['prometheus-community'] }}"
    chart_version: "{{ monitor.prometheus.adapter.chart.version }}"
    release_name: "{{ monitor.prometheus.adapter.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      image:
        repository: "{{ monitor.repository }}k8s.gcr.io/prometheus-adapter/prometheus-adapter"
      prometheus:
        url: http://prometheus-server
        port: 80
        path: /prometheus
      rules:
        resource:
          cpu:
            containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, container!=""}[3m])) by (<<.GroupBy>>)
            nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
            resources:
              overrides:
                kubernetes_io_hostname:
                  resource: node
                namespace:
                  resource: namespace
                pod:
                  resource: pod
            containerLabel: container
          memory:
            containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>, container!=""}) by (<<.GroupBy>>)
            nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
            resources:
              overrides:
                kubernetes_io_hostname:
                  resource: node
                namespace:
                  resource: namespace
                pod:
                  resource: pod
            containerLabel: container
          window: 3m

- name: install grafana
  kubernetes.core.helm:
    chart_ref: "{{ __path }}{{ monitor.prometheus.grafana.chart.path }}"
    chart_repo_url: "{{ chart.repo['grafana'] }}"
    chart_version: "{{ monitor.prometheus.grafana.chart.version }}"
    release_name: "{{ monitor.prometheus.grafana.name }}"
    release_namespace: "{{ monitor.namespace }}"
    create_namespace: yes
    atomic: yes
    release_values:
      image:
        repository: "{{ monitor.repository }}grafana/grafana"
      testFramework:
        image: "{{ monitor.repository }}bats/bats"
      downloadDashboardsImage:
        repository: "{{ monitor.repository }}curlimages/curl"
      persistence:
        enabled: true
        storageClassName: "{{ monitor.storage_class }}"
      initChownData:
        image:
          repository: "{{ monitor.repository }}busybox"
      grafana.ini:
        server:
          root_url: "%(protocol)s://%(domain)s/grafana"
          serve_from_sub_path: true
      adminPassword: admin
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
          - name: Prometheus
            type: prometheus
            url: http://prometheus-server/prometheus
            access: proxy
            isDefault: true

      dashboardProviders:
       dashboardproviders.yaml:
         apiVersion: 1
         providers:
         - name: 'default'
           orgId: 1
           folder: ''
           type: file
           disableDeletion: false
           editable: true
           allowUiUpdates: true
           options:
             path: /var/lib/grafana/dashboards/default

      dashboards: "{{ monitor.prometheus.grafana.dashboards }}"
